name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      build_target:
        description: 'Build target'
        required: false
        default: 'default'
        type: choice
        options:
          - default
          - all
          - cu124-py311
          - cu124-py312
          - cu128-py311
          - cu128-py312

env:
  REGISTRY: docker.io
  REGISTRY_USER: ${{ secrets.DOCKER_USERNAME || 'useless1234567' }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: main

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          echo "=============================================================================="
          echo "Freeing up disk space on CI system"
          echo "=============================================================================="

          echo "Disk usage before cleanup:"
          df -h

          echo "Listing 100 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100

          echo "Removing large packages"
          sudo apt-get remove -y '^ghc-8.*' || true
          sudo apt-get remove -y '^dotnet-.*' || true
          sudo apt-get remove -y '^llvm-.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel monodoc-http || true
          sudo apt-get autoremove -y
          sudo apt-get clean

          echo "Disk usage after package removal:"
          df -h

          echo "Removing large directories"
          # The biggest space savers (based on Apache Flink + GitHub community recommendations)
          sudo rm -rf /opt/hostedtoolcache    # ~10GB
          sudo rm -rf /usr/share/dotnet/      # ~15GB (Apache Flink approach)
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/graalvm/
          sudo rm -rf /usr/local/.ghcup/
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/julia*
          sudo rm -rf /usr/share/miniconda
          sudo rm -rf /usr/local/share/edge_driver
          sudo rm -rf /usr/local/share/chromedriver-linux64
          sudo rm -rf /usr/local/share/gecko_driver

          # Remove Docker images and containers
          docker system prune -af --volumes

          echo "Final disk usage:"
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Check Docker credentials
        run: |
          echo "Checking Docker credentials..."
          if [[ -z "${{ secrets.DOCKER_USERNAME }}" ]]; then
            echo "❌ DOCKER_USERNAME secret is not set"
            exit 1
          else
            echo "✅ DOCKER_USERNAME is set"
          fi

          if [[ -z "${{ secrets.DOCKER_PASSWORD }}" ]]; then
            echo "❌ DOCKER_PASSWORD secret is not set"
            exit 1
          else
            echo "✅ DOCKER_PASSWORD is set"
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine build target
        id: target
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BUILD_TARGET="${{ github.event.inputs.build_target }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            BUILD_TARGET="all"
          else
            BUILD_TARGET="cu128-py312"
          fi
          echo "BUILD_TARGET=${BUILD_TARGET}" >> $GITHUB_OUTPUT
          echo "Building target: ${BUILD_TARGET}"

      - name: Build and push Docker images
        env:
          BUILD_TARGET: ${{ steps.target.outputs.BUILD_TARGET }}
          BUILDKIT_PROGRESS: plain
          DOCKER_BUILDKIT: 1
        run: |
          # Set buildx configuration for space optimization
          docker buildx create --use --driver docker-container --driver-opt network=host --driver-opt env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760

          # Monitor disk space during build
          echo "Disk space before build:"
          df -h

          if [[ "${BUILD_TARGET}" == "default" ]]; then
            docker buildx bake -f docker-bake.hcl --push \
              --set "*.cache-from=type=gha" \
              --set "*.cache-to=type=gha,mode=max"
          elif [[ "${BUILD_TARGET}" == "all" ]]; then
            docker buildx bake -f docker-bake.hcl all --push \
              --set "*.cache-from=type=gha" \
              --set "*.cache-to=type=gha,mode=max"
          else
            docker buildx bake -f docker-bake.hcl ${BUILD_TARGET} --push \
              --set "*.cache-from=type=gha" \
              --set "*.cache-to=type=gha,mode=max"
          fi

          # Clean up after build
          docker system prune -f

      - name: Send Feishu notification on success
        if: success()
        run: |
          BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')
          curl -X POST "https://open.feishu.cn/open-apis/bot/v2/hook/63f35e91-c544-44f0-b10b-54d8af35d9e7" \
            -H "Content-Type: application/json" \
            -d '{
              "msg_type": "text",
              "content": {
                "text": "🎉 ComfyUI Docker 构建成功！\n\n📦 构建目标: ${{ steps.target.outputs.BUILD_TARGET }}\n🏷️ 镜像标签: ${{ env.REGISTRY_USER }}/comfyui:${{ steps.target.outputs.BUILD_TARGET }}-v0.3.40-fastapi-v0.0.1\n🔗 仓库: ${{ github.repository }}\n📝 提交: ${{ github.sha }}\n👤 提交者: ${{ github.actor }}\n⏰ 构建时间: '"${BUILD_TIME}"'"
              }
            }'

      - name: Send Feishu notification on failure
        if: failure()
        run: |
          FAILURE_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')
          curl -X POST "https://open.feishu.cn/open-apis/bot/v2/hook/63f35e91-c544-44f0-b10b-54d8af35d9e7" \
            -H "Content-Type: application/json" \
            -d '{
              "msg_type": "text",
              "content": {
                "text": "❌ ComfyUI Docker 构建失败！\n\n📦 构建目标: ${{ steps.target.outputs.BUILD_TARGET }}\n🔗 仓库: ${{ github.repository }}\n📝 提交: ${{ github.sha }}\n👤 提交者: ${{ github.actor }}\n⏰ 失败时间: '"${FAILURE_TIME}"'\n🔍 查看详情: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }
            }'
